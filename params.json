{"name":"Webimageview","tagline":"ImageView for Android which loads image data from an url.","body":"WebImageView\r\n============\r\n\r\nAndroid ImageView which loads image from an url. \r\n\r\n**[Examples here](https://github.com/rooseve/WebImageViewExample).**\r\n\r\n###Features\r\n\r\n- **Http/Https** url supported\r\n- Load in **background** and **concurrently**, won't break the main UI thread.\r\n- Build-in **memory/file cache**, access network as few as possible.\r\n- **Progress update** supported, very easy to implement progress bar or something similar.\r\n- **Placeholder** image supported.\r\n- Works perfectly with **ListView** .\r\n\t\r\n\t![WebImageViewList](https://raw.github.com/rooseve/WebImageView/master/docs/images/snap.png)\r\n\r\n\r\n###How to use?\r\n\r\n> Reference [these examples](https://github.com/rooseve/WebImageViewExample) for more details.\r\n\r\n####Add WebImageView as a Library.\r\n\r\nEclipse for example:\r\n\r\n- Import this project. \r\n- Make WebImageView a Library project: right click the WebImageView project name, select **Android** in the left properties list, and on the right panel, check **Is Library**\r\n- Add it to other projects: still right click the project name which needs WebImageView, find the Android property panel, and this time, click the Add button in the Library part, which will show a project list, just select the WebImageView project.\r\n\r\nOr copy **webimageview.jar** in the WebImageView's **bin** folder, to the **libs** folder of projects where needs WebImageView.\r\n\r\n####Modify AndroidManifest.xml, add internet and storage permissions.\r\n\r\n\t<!-- to download images -->\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <!-- to cache the images -->\r\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\r\n\r\n#### In Xml layout\r\n\r\n\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n\t<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n\t    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n\t    android:layout_width=\"fill_parent\"\r\n\t    android:layout_height=\"fill_parent\"\r\n\t    android:orientation=\"vertical\" >\r\n\t\r\n\t    <com.rsv.widget.WebImageView\r\n\t        android:layout_width=\"fill_parent\"\r\n\t        android:layout_height=\"80dp\"\r\n\t        app:webImageUrl=\"[the image url, string OR @string/string_id]\" />\r\n\t\r\n\t</LinearLayout>\r\n\r\nThe key parts are:\r\n\r\n-  xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n-  <com.rsv.widget.WebImageView\r\n-  app:webImageUrl=\"[the image url]\" \r\n\r\nThe others are just normal ImageView stuff.\r\n\r\nYou might got an error like this:\r\n \r\n> No resource identifier found for attribute 'webImageUrl' in package 'com.rsv.widget'\r\n\r\nJust add attr.xml in the res/values folder, and fill in such content:\r\n\r\n\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n\t<resources>\r\n\t\r\n\t    <declare-styleable name=\"WebImageView\">\r\n\t        <attr name=\"webImageUrl\" format=\"string\" />\r\n\t    </declare-styleable>\r\n\t\r\n\t</resources>\r\n\r\n\r\n#### In Java program\r\n\r\n\tWebImageView webImage = (WebImageView) this.findViewById(R.id.webImage);\r\n\r\nWith a WebImageView instance, you can:\r\n\r\n- Set the image url\r\n\r\n\t\twebImage.setWebImageUrl(url);\r\n\r\n- Set the placeholder\r\n\r\n\t\twebImage.setWebImagePlaceholder(Drawable/Bitmap/resouceId)\r\n\r\n- Set the progress listener\r\n\r\n\t\twebImage.setWebImageProgressListener(new WebImageProgressListener() {\r\n\t\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void onStart(WebImageView view) {\r\n\t\t\t\t\t//start loading image\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void onLoading(WebImageView view, int progress) {\r\n\t\t\t\t\t//loading progess(0~100) \r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void onLoad(WebImageView view) {\r\n\t\t\t\t\t//Finish loading\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void onError(WebImageView view, Exception e) {\r\n\t\t\t\t\t//Something wrong\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\r\n###Configuration\r\n\r\nThere're some parameters which can be configured in the properties file.\r\n\r\nCreate a file named **com.rsv.webimageview.config.properties** in the **assets** folder.\r\n\r\n\t#the cache directory name, default: rsv_webimg_cache\r\n\twebImageCacheDir=rsv_webimg_cache\r\n\t\r\n\t#storage location\r\n\t#\t1: external(default)\r\n\t#\t2: for interval\r\n\twebImageCacheStorage=1\r\n\t\r\n\t#the cache space limit in MB, default 50\r\n\twebImageCacheSpaceInMB=50\r\n\t\r\n\t#how many web images could be kept in memory as cache, default 20\r\n\t#we use SoftReference to cache the image, if memory is too low, the space will be recycled anyway, so do not worry too much.\r\n\twebImageMemorySizeLimit=30\r\n\r\n\t#the useragent to fetch the image url\r\n\tuseragentForImageLoader=Mozilla/5.0 (compatible; RsvWebImageView)\t\r\n\r\n###FAQ\r\n\r\n- How long will an image be expired?\r\n\t\r\n\tThe short answer is **Never** for right now. I think accessing network should be as few as possible, so images will be cached in the **webImageCacheDir** and only be removed when the space occupied in MB exceeds  the value of **webImageCacheSpaceInMB**. \r\n\r\n\tBut if an image does expire very often, you chould handle it like this:\r\n\r\n\tAppend some **get** parameter to the end of the image url, which make it looks like another image. For example:\r\n\r\n\t\thttp://www.android.com/images/logo.png\r\n\r\n\tAnd\r\n\t\r\n\t\thttp://www.android.com/images/logo.png?t=timestamp\r\n\r\n\tare the same image, but will be treated as different web images as with differtnt urls.\r\n\r\n\tBut if you do know how long the image will expired, there's a method:\r\n\r\n\t\tsetWebImageExpireInSecs\r\n\r\n\tThe expire time will be -1 by default, means never expired, and file/memory cache will be used. 0 means always to fetch the image via network, and no cache used. If set to be >0, memory cache will disabled, just file cache works.\r\n\r\n\r\n- Image size and ImageView size.\r\n\r\n\tWebImageView extends ImageView, and it only cares how to load to url efficiently, and let the ImageView to handle the scale problem.\r\n\r\n\tFor example, the real image might be 300px * 300px, but the ImageView size might just be 100px * 100px. WebImageView's cache system does cache the 300 * 300 image, but it's still to be scaled in time when displayed, which consumes the cpu. So for performance reasons, it's recommended to make the image size just fit in the ImageView.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}